#!/usr/bin/env python
# encoding: utf-8
"""
061 - Polygonal Numbers.py
16 January 2004

Created by Jason Sundram on 2010-01-05.
Copyright (c) 2010. All rights reserved.

Triangle, square, pentagonal, hexagonal, heptagonal, and octagonal numbers are all figurate (polygonal) numbers and are generated by the following formulae:
Triangle    P_(3,n) = n(n+1)/2        1, 3, 6, 10, 15, ...
Square      P_(4,n) = n^(2)           1, 4, 9, 16, 25, ...
Pentagonal  P_(5,n) = n(3n−1)/2       1, 5, 12, 22, 35, ...
Hexagonal   P_(6,n) = n(2n−1)         1, 6, 15, 28, 45, ...
Heptagonal  P_(7,n) = n(5n−3)/2       1, 7, 18, 34, 55, ...
Octagonal   P_(8,n) = n(3n−2)         1, 8, 21, 40, 65, ...

The ordered set of three 4-digit numbers: 8128, 2882, 8281, has three interesting properties.

   1. The set is cyclic, in that the last two digits of each number is the first two digits of the next number (including the last number with the first).
   2. Each polygonal type: triangle (P_(3,127)=8128), square (P_(4,91)=8281), and pentagonal (P_(5,44)=2882), is represented by a different number in the set.
   3. This is the only set of 4-digit numbers with this property.

Find the sum of the only ordered set of six cyclic 4-digit numbers for which each polygonal type: 
triangle, square, pentagonal, hexagonal, heptagonal, and octagonal, is represented by a different number in the set.

"""
from timed import timed
import utils

tri     = lambda n : n * (n + 1) / 2
square  = lambda n : n*n
penta   = lambda n : n * (3 * n - 1) / 2
hexa    = lambda n : n * (2 * n - 1) 
hepta   = lambda n : n * (5 * n - 3) / 2
octa    = lambda n : n * (3 * n - 2)

len4 = lambda x : len(str(x)) == 4
get = lambda f : filter(len4, map(f, range(1, 200)))
match = lambda x, y : str(x)[-2:] == str(y)[:2]

def insert(t, n):
    """ Inserts n in the second-to-last place in tuple t. Should probably make this more generic.
        e.g. insert((1,2,3), 5) -> 1,2,5,3.
    """
    return t[:-1] + (n, t[-1])

def update_candidates(prev_candidates, poly):
    candidates = []
    for c in prev_candidates:
        candidates.extend([insert(c, p) for p in poly if match(c[-2], p)])
    return candidates
        
@timed 
def original_solution():
    """runtime is 323ms on mbp"""
    poly = [tri, square, penta, hexa, hepta, octa]
    
    polys = map(get, poly)
    answers = set()
    for p in utils.permutations(polys):
        candidates = []
        # Do the first and last one (special because of wraparound, no tuples)
        for p_last in p[-1]:
             candidates.extend([(p_i, p_last) for p_i in p[0] if match(p_last, p_i)])
        
        # Do the middle ones (not special)
        for i in range(1, 4):
            candidates = update_candidates(candidates, p[i])
        
        # Do the second-to-last one (special because have to check both ends)
        final = []
        for c in candidates:
            final.extend([insert(c, p_i) for p_i in p[4] if match(c[-2], p_i) and match(p_i, c[-1])])
        
        # Did we get anything?
        if len(final):
            print final, sum(final[0])
            return sum(final[0])
    
    return -1


def main():
    print 'The answer (original) is: %d' % original_solution()


if __name__ == '__main__':
    main()

